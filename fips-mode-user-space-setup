#!/usr/bin/bash
#
# This script only changes the kernel FIPS flag (/proc/sys/crypto/fips_enabled)
# in the some settings to enable the FIPS mode for the testing purpose of
# OpenSSL.

set -euo pipefail

# A temporary directory in the real space. The directory is often not preserved
# between reboots.
BASE_DIR="/var/tmp/fips-mode-user-space"

exit_status=0

function enable_fips {
    mkdir -p "${BASE_DIR}"

    file_system=$(df --output=source "${BASE_DIR}" | tail -1)
    if [ "${file_system}" = "tmpfs" ]; then
        cat <<EOF
[ERROR] File system ${file_system} not supported as a base directory.
Change the base directory in the script ${0}.
EOF
        exit 1
    fi

    echo '1' > ${BASE_DIR}/fips_enabled
    mount --bind ${BASE_DIR}/fips_enabled /proc/sys/crypto/fips_enabled
    # Set the security context in the SELinux case.
    if command -v selinuxenabled > /dev/null && selinuxenabled; then
        chcon --reference /proc/sys/crypto /proc/sys/crypto/fips_enabled
    fi
}

function disable_fips {
    umount /proc/sys/crypto/fips_enabled
    # It seems that this line is necessary to set 0 for the
    # `/proc/sys/crypto/fips_enabled`.
    rm -f ${BASE_DIR}/fips_enabled
    rm -rf "${BASE_DIR}"
}

function show_fips_status {
    fips_enabled=$(cat /proc/sys/crypto/fips_enabled)
    echo "/proc/sys/crypto/fips_enabled: ${fips_enabled}"
}

umask 022

cmd=${1:-}

case "${cmd}" in
    status)
        show_fips_status
        ;;
    enable)
        enable_fips
        ;;
    disable)
        disable_fips
        ;;
    *)
        echo "Usage: ${0} status|enable|disable"
        exit_status=2
        ;;
esac

exit "${exit_status}"
